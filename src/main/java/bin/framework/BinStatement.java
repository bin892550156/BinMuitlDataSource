package bin.framework;

import java.sql.*;

public class BinStatement implements Statement {

    /**
     * 真正处理的Statement对象
     */
    private Statement realStatment;
    /**
     * 连接查找器
     */
    private ConnectionFinder connectionFinder;

    public BinStatement(ConnectionFinder connectionFinder) {
        this.connectionFinder = connectionFinder;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        getRealStatment(sql);
        return realStatment.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        getRealStatment(sql);
        return realStatment.executeUpdate(sql);
    }

    @Override
    public void close() throws SQLException {
        realStatment.close();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return realStatment.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        realStatment.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return realStatment.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        realStatment.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        realStatment.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return realStatment.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
         realStatment.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        realStatment.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return realStatment.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        realStatment.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        realStatment.setCursorName(name);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        getRealStatment(sql);
        return realStatment.execute(sql);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return realStatment.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return realStatment.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return realStatment.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
         realStatment.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return realStatment.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        realStatment.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return realStatment.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return realStatment.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return realStatment.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        getRealStatment(sql);
        realStatment.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        realStatment.clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return realStatment.executeBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return realStatment.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return realStatment.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return realStatment.getGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        getRealStatment(sql);
        return realStatment.executeUpdate(sql,autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        getRealStatment(sql);
        return realStatment.executeUpdate(sql,columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        getRealStatment(sql);
        return realStatment.executeUpdate(sql,columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        getRealStatment(sql);
        return realStatment.execute(sql,autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        getRealStatment(sql);
        return realStatment.execute(sql,columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        getRealStatment(sql);
        return realStatment.execute(sql,columnNames);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return realStatment.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return realStatment.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        realStatment.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return realStatment.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        realStatment.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return realStatment.isCloseOnCompletion();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return realStatment.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return realStatment.isWrapperFor(iface);
    }

    /**
     * 获取真实的Statment对象
     * @param sql SQL脚本
     */
    private void getRealStatment(String sql){
        if(realStatment==null){
            try {
                Connection connection = connectionFinder.findConnection(sql);
                realStatment=connection.createStatement();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
